/*!
 * \mainpage %QDiscord
 * \section qdiscord QDiscord
 * %QDiscord is a [Qt](https://www.qt.io/) wrapper for the
 * [Discord API](https://discordapp.com/developers/docs) written
 * in C++. It was written to easily allow the creation of Discord bots.
 * Currently, it is in an incomplete state and will be under constant development,
 * so expect things to either not work or not be available.
 * Feel free to submit an issue on the
 * [GitHub for this project](https://github.com/george99g/QDiscord/issues) if you need
 * specific functionality to be working before anything else.
 * \section discord Discord
 * [Discord](https://discordapp.com) is a proprietary Voice over IP application
 * designed for gaming communities and is developed by
 * [Hammer & Chisel](https://discordapp.com/company).
 * \section github GitHub repository
 * The GitHub repository for this project can be found
 * [here](https://github.com/george99g/QDiscord).
 * \section installing Installing
 * \subsection step1 Step 1: Compile
 * The quickest way to do this is to open the project file with QtCreator
 * and hit the build button. Alternatively, you may build it via
 * the command line like this (assuming you already cloned the project,
 * are in the main directory and have the Qt packages installed on your system):
 * \code
 * mkdir build
 * cd build
 * qmake -qt=qt5 ../QDiscord/QDiscord.pro
 * make mocables all
 * \endcode
 * \subsection step2 Step 2: Link
 * This is what I have to do in my `.pro` file to get everything working on my machine.
 * \code
 * INCLUDEPATH += "/home/user/git/QDiscord/QDiscord"
 * LIBS += "/home/user/git/QDiscord/build-QDiscord-Desktop_Qt_5_7_0_GCC_64bit-Debug/libQDiscord.a"
 * \endcode
 * `INCLUDEPATH` specifies where the header files for the library can be found.
 * `LIBS` specifies where your compiled library is.\n\n
 * Alternatively, you may include this project as a Git submodule and use QtCreator's wizards to link
 * it as a library to your own project. This is the preferred method as Qt will manage building and
 * linking the library, however it is out of the scope of this readme. For more information, see
 * [the official Qt documentation](http://doc.qt.io/qtcreator/creator-project-qmake-libraries.html).
 * \section example Example
 * Here's a short example application that will send a specified message to the first channel on
 * the specified server once it connects.
 * \subsection main main.cpp
 * \code
 * #include <QCoreApplication>
 * #include "application.hpp"
 *
 * int main(int argc, char* argv[])
 * {
 *	   QCoreApplication a(argc, argv);
 *	   Application app;
 *	   return a.exec();
 * }
 * \endcode
 * \subsection header application.hpp
 * \code
 * #ifndef APPLICATION_HPP
 * #define APPLICATION_HPP
 *
 * #include <QDiscord>
 *
 * class Application : public QObject
 * {
 *	   Q_OBJECT
 * public:
 *	   explicit Application(QObject *parent = 0);
 * private:
 *	   void guildAvailable(QDiscordGuild* guild);
 *	   void logout();
 *	   QString _token;
 *	   QDiscord _discord;
 * };
 *
 * #endif
 * \endcode
 * \subsection source application.cpp
 * \code
 * #include "application.hpp"
 *
 * Application::Application(QObject *parent) : QObject(parent)
 * {
 *	   connect(_discord.state(), &QDiscordStateComponent::guildCreated, this, &Application::guildCreated);
 *	   connect(_discord.rest(), &QDiscordRestComponent::messageSent, this, &Application::logout);
 *	   _discord.login("<TOKEN_HERE>");
 * }
 *
 * void Application::guildAvailable(QDiscordGuild* guild)
 * {
 *	   if(guild->name() == "Test Server")
 *		   _discord.rest()->sendMessage("Test", guild->channels().values()[0]);
 * }
 *
 * void Application::logout()
 * {
 *	   _discord.logout();
 * }
 * \endcode
 * \section relatedProjects Related projects
 * A list of Discord API libraries can be found
 * [here](https://discordapi.com/unofficial/libs.html).
 * \section docs Compiling the documentation
 * Make has an extra target named `docs` for generating the documentation.\n
 * If you wish to generate the documentation when compiling from QtCreator, add
 * a custom build step for make, with the Doxygen file's directory as the working
 * directory and with the following arguments for make:
 * \code
 * docs --makefile=%{buildDir}/Makefile
 * \endcode
 */
